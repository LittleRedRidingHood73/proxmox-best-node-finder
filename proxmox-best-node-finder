#!/bin/bash
#
# A script to find the Proxmox node with the most available memory.
# It reliably gets each node's IP and skips any nodes that are offline.
# The final output is the node name and its IP (e.g., "ishtar 10.21.78.66").
# Run with --debug or -d for verbose, step-by-step output.
#

# --- Configuration ---
MANAGER_IP=""
API_TOKEN=""
MANAGEMENT_IFACE="vmbr0" # The network interface to get the IP from
# ---------------------

# --- Argument Parsing & Debug Setup ---
DEBUG=0
if [[ "$1" == "--debug" || "$1" == "-d" ]]; then
    DEBUG=1
fi

# --- Helper Functions ---
info() { if [ "$DEBUG" -eq 1 ]; then echo -e "\e[34m[INFO]\e[0m $1"; fi; }
success() { if [ "$DEBUG" -eq 1 ]; then echo -e "\e[32m[SUCCESS]\e[0m $1"; fi; }
error() { echo -e "\e[31m[ERROR]\e[0m $1" >&2; }

# --- Main Logic ---
set -e

if ! command -v jq &> /dev/null; then
    error "jq is not installed. Please install it with 'sudo apt install jq'."
    exit 1
fi

info "Starting script in debug mode."

# 1. Fetch initial data
info "Fetching initial cluster-wide data..."
all_nodes_data=$(curl -s -k -H "Authorization: $API_TOKEN" https://$MANAGER_IP:8006/api2/json/nodes)
all_vms_data=$(curl -s -k -H "Authorization: $API_TOKEN" https://$MANAGER_IP:8006/api2/json/cluster/resources?type=vm)
success "Initial data fetched.\n"

# 2. Get a list of ONLINE node names to loop through
info "Filtering for online nodes..."
online_node_list=$(echo "$all_nodes_data" | jq -r ".data[] | select(.status == \"online\") | .node")
offline_node_list=$(echo "$all_nodes_data" | jq -r ".data[] | select(.status == \"offline\") | .node")

if [ -n "$offline_node_list" ]; then
    info "Skipping offline nodes: $offline_node_list"
fi
info "Found online nodes:\n$online_node_list\n"

# 3. Loop through each ONLINE node to build a complete stats object
info "Gathering detailed stats for each online node..."
final_stats="[]" # Initialize an empty JSON array

for node in $online_node_list; do
    info "Processing node: $node"

    # Get the IP from the specified network interface
    node_ip=$(curl -s -k -H "Authorization: $API_TOKEN" https://$MANAGER_IP:8006/api2/json/nodes/$node/network | jq -r ".data[] | select(.iface == \"$MANAGEMENT_IFACE\") | .address // \"N/A\"")
    
    # Extract total memory for this node
    total_mem=$(echo "$all_nodes_data" | jq ".data[] | select(.node == \"$node\") | .maxmem // 0")

    # Calculate used memory for this node
    used_mem=$(echo "$all_vms_data" | jq "[.data[] | select(.node == \"$node\" and .status == \"running\") | .maxmem] | add // 0")

    # Build a JSON object for this node's stats
    node_obj=$(jq -n \
                  --arg name "$node" \
                  --arg ip "$node_ip" \
                  --argjson total "$total_mem" \
                  --argjson used "$used_mem" \
                  '{node: $name, ip: $ip, available_mem: ($total - $used)}')

    # Add this node's object to our final list
    final_stats=$(echo "$final_stats" | jq ". + [$node_obj]")
done
success "Finished gathering stats.\n"

# 4. Check if any online nodes were found
if [[ -z "$online_node_list" ]]; then
    error "No online nodes were found. Exiting."
    exit 1
fi

# 5. Print debug information if the flag is set
if [ "$DEBUG" -eq 1 ]; then
    echo "--- Calculated Node Statistics (bytes) ---"
    echo "$final_stats" | jq '.'
    echo "------------------------------------------"
    echo
fi

# 6. Identify the best node and format the output
info "Identifying the node with the most available memory..."
best_node_info=$(echo "$final_stats" | jq -r 'sort_by(.available_mem) | .[-1] | "\(.node) \(.ip)"')

# 7. Print the final result
echo "$best_node_info"

